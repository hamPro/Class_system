Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, const char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, const char **)) [1] nbody.cc(66,45)
  -> INLINE: (69,38) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,5) MoveParticles(int, ParticleType *, float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cc(26,3) inlined into nbody.cc(100,5)
   remark #25236: Loop with pragma of trip count = 16384 ignored for large value
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cc(32,5) inlined into nbody.cc(100,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.cc(32,5) inlined into nbody.cc(100,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.cc(59,3) inlined into nbody.cc(100,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.cc(59,3) inlined into nbody.cc(100,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END


Non-optimizable loops:


LOOP BEGIN at nbody.cc(97,3)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cc(38,24):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x000000007 }.
nbody.cc(60,5):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512, F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x00000003F }.
nbody.cc(62,5):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x000000007 }.
nbody.cc(60,5):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512, F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x00000003F }.
nbody.cc(62,5):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x000000007 }.
nbody.cc(66,45):remark #34051: REGISTER ALLOCATION : [main] nbody.cc:66

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   53[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1-k7]
        
    Routine temporaries
        Total         :     555
            Global    :     136
            Local     :     419
        Regenerable   :      97
        Spilled       :      21
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       3 [1.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      28 [1.19e+02 ~ 0.2%]
            Writes    :      23 [3.80e+01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MoveParticles(int, ParticleType *, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MoveParticles(int, ParticleType *, float)) [3] nbody.cc(23,88)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cc(26,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cc(32,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.cc(32,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.cc(59,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at nbody.cc(60,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between (particle+i*24)[_2] (60:5) and *(particle+i*24+_2*4+12) (60:5)
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cc(38,24):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x000000007 }.
nbody.cc(23,88):remark #34051: REGISTER ALLOCATION : [_Z13MoveParticlesiP12ParticleTypef] nbody.cc:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   50[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm31 k1-k6]
        
    Routine temporaries
        Total         :     256
            Global    :      67
            Local     :     189
        Regenerable   :      14
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.0%]
            Writes    :       3 [3.93e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
